import { emojis } from '@/lib/utils';
import type { Prisma, Site } from '@prisma/client';

type SiteTypes = Site | Prisma.SiteCreateInput | Prisma.SiteUpdateInput;

export const BotMessages = {
  site: {
    log: (site: Site) => {
      return parseMessage('log', site);
    },
    created: (site: Prisma.SiteCreateInput) => {
      return parseMessage('create', site);
    },
    updated: (site: Prisma.SiteUpdateInput) => {
      return parseMessage('update', site);
    },
    removed: (site: Site) => {
      return parseMessage('remove', site);
    },
    create: {
      steps: [
        {
          ru: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–∞–π—Ç–∞',
        },
        {
          ru: '–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞',
        },
        {
          ru: '–£–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞',
        },
        {
          ru: '–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!',
        },
      ],
    },
  },
};

function parseMessage(
  type: 'create' | 'update' | 'remove' | 'log',
  site: SiteTypes,
) {
  site;
  switch (type) {
    case 'log':
      return `
      ${getSiteName(site.name)}${getSiteUrl(site.url)}${getSiteAvailable(site.isAvailable)}`;
    case 'create':
      return `
			–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n${getSiteName(site.name)}${getSiteUrl(site.url)}${getSiteAvailable(site.isAvailable)}`;

    case 'update':
      return `
			–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n${getSiteName(site.name)}${getSiteUrl(site.url)}${getSiteAvailable(site.isAvailable)}`;

    case 'remove':
      return `
			–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n${getSiteName(site.name)}${getSiteUrl(site.url)}`;
  }
}
function getSiteName(name: string | Prisma.StringFieldUpdateOperationsInput) {
  return `${emojis.woman} –ò–º—è: ${name}`;
}

function getSiteAvailable(
  value: boolean | Prisma.BoolFieldUpdateOperationsInput,
) {
  return value ? '\nüü¢ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω' : '\nüî¥ –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
}

function getSiteUrl(
  url?: string | Prisma.NullableStringFieldUpdateOperationsInput,
) {
  return url ? `\nüìé –°—Å—ã–ª–∫–∞: <a href="${url}">${url}</a>` : '';
}

export function getSitePreview(site: Site) {
  return `${site.isAvailable ? emojis.available : emojis.unavailable} | ${site.name}${site.url ? ` | ${site.url}` : ''}`;
}
